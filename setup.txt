conda create -n inskop_env python=3


#posgresql db setup

python manage.py migrate
python manage.py createsuperuser
-> create temp_user from admin



#to dockerize

docker run --env-file .env inskop_api


#eb_cli

eb init
eb local run --envvars SECRET_KEY='_$=$%eqxk$8ss4n7mtgarw^5$8^d5+c83!vwatr@i_81myb=e4',DB_NAME='postgres',DB_USER='postgres',DB_PASS='postgres',DB_SERVICE='postgres',DB_PORT='5432',AUTH0_KEY='xKkjgMcEnYzq2aly6yihfBwQIifZMAhaUPM0Y_m3FAfu7mQ-e2t6_-cFIyDVpSyq'


# local docker
docker build -t inskop_api ./inskop_api
docker run --env-file ./inskop_api/.env inskop_api
docker tag inskop_api:latest 782246339304.dkr.ecr.eu-west-1.amazonaws.com/inskop_api:latest
docker ps
docker exec -t -i <container name> bash
python manage.py migrate


# connect to served app

eb ssh
sudo docker ps
sudo docker exec -t -i <container name> bash



python manage.py shell < inskop/cvtools_to_codes.py


scp -i key_pair_vw.pem somefile.txt root@my.ec2.id.amazonaws.com:/

>>> import cv2
>>> img = cv2.imread('media/scenes/aouta/cam1/thumbnail.jpg',0)

cap = cv2.VideoCapture('media/scenes/aouta/cam1/orig.mp4')
_, frame = cap.read()
ffmpeg -i media/scenes/aouta/cam1/orig.mp4 2>&1 | egrep "Seems|Input|Duration:|Stream"

>>> from inskop.scene_manager.models import Scene
>>> aouta = Scene.objects.get(pk=1)
>>> cap = aouta.orig_cap


avconv -i color_select.avi -c:v libx264 -c:a copy color_select.mp4


> to install cvtools in conda env
source activate inskop
pip install -e ~/Projets/inskop/code/cvtools/



correct homebrew.pth if pb with PYTHONPATH

Psycopg pb
cd /usr/local/lib
macbook-pro-de-vw-1:lib vwrobel$ sudo ln -sf /Applications/Postgres.app/Contents/Versions/9.6/lib/libcrypto.1.0.0.dylib libcrypto.1.0.0.dylib
macbook-pro-de-vw-1:lib vwrobel$ sudo ln -sf /Applications/Postgres.app/Contents/Versions/9.6/lib/libssl.1.0.0.dylib libssl.1.0.0.dylib





brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-libass --with-libquvi --with-libvorbis --with-libvpx --with-opus --with-x265
brew install -v opencv3 --HEAD --with-ffmpeg --with-tbb --with-contrib --with-python3


brew options ffmpeg (to find what you want to install)
brew install ffmpeg --with-x --with-y --with-z etc.
brew update && brew upgrade (Update formulae and Homebrew itself && Install newer versions of outdated packages)
brew prune (Remove dead symlinks from Homebrewâ€™s prefix)
brew doctor (Check your Homebrew installation for common issues)


# symbolic link to cvtools folder
ln -s ~/Projets/inskop/code/cvtools ~/Projets/inskop/code/inskop_api/api/cvtools


#install cvtools in virtualenv
pip install -e pathtocvtools

cd Projets/inskop/code/inskop_api/api/
source ~/.virtualenvs/inskop/bin/activate

# launch celery worker
celery worker -A inskop.celery.app --loglevel=info

# in a 2nd terminal launch redis
bash run-redis.sh


docker run --env-file api/.env inskop_api daphne -b 0.0.0.0 -p 8000 inskop.asgi:channel_layer
docker run --env-file api/.env inskop_api python manage.py runworker
docker run --env-file api/.env inskop_api celery worker -A inskop.celery.app --loglevel=info


# from Filezilla move media to ssh
then from instance

mv /home/ec2-user/.ssh/media/* /mnt/efs/

sudo docker logs --follow <ID>


# IMPORTANT: mount Elastic File System
sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 fs-f0768939.efs.eu-west-1.amazonaws.com:/  /mnt/efs/


python manage.py shell

from inskop.scene_manager.models import Scene
scene = Scene.objects.get(pk=1)

import cv2
cap = cv2.VideoCapture('/usr/src/app/media/scenes/aouta/cam1/orig.mp4')
_, frame = cap.read()
frame
>>>